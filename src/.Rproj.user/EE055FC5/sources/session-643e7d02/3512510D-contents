#------------------------------------------------------------
# Program: loadDB.PractI.CoatesZ.R
# Author: Zachary Coates
# Semester: Spring 2025
# Description: Loads data from a CSV file into MySQL.
#------------------------------------------------------------

#------------------------------------------------------------
# Load required libraries
#------------------------------------------------------------
if (!requireNamespace("DBI", quietly = TRUE)) install.packages("DBI", dependencies = TRUE)
if (!requireNamespace("RMySQL", quietly = TRUE)) install.packages("RMySQL", dependencies = TRUE)
if (!requireNamespace("readr", quietly = TRUE)) install.packages("readr", dependencies = TRUE)
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table", dependencies = TRUE)

library(DBI)
library(RMySQL)
library(readr)
library(data.table)

#------------------------------------------------------------
# Database Connection
#------------------------------------------------------------

connect_db <- function() {
  db_host <- "mysql-3cfa0d7f-northeastern-861d.g.aivencloud.com"
  db_port <- 15087
  db_name <- "defaultdb"
  db_user <- "avnadmin"
  db_password <- Sys.getenv("DB_PASSWORD")
  
  con <- dbConnect(RMySQL::MySQL(),
                   dbname = db_name,
                   host = db_host,
                   port = db_port,
                   user = db_user,
                   password = db_password)
  
  return(con)
}

#------------------------------------------------------------
# Load CSV Data
#------------------------------------------------------------

file_path <- file_url <- "https://s3.us-east-2.amazonaws.com/artificium.us/datasets/restaurant-visits-139874.csv"
df <- fread(file_path, na.strings = c("", "NULL", "0000-00-00", "9999-99-99", "99", "999.99", "N/A"))
df <- df[1:min(150, .N), ] 

# Convert negative or unrealistic values to NA or reasonable values
df$WaitTime[df$WaitTime < 0] <- NA  # Remove negative wait times
df$PartySize[df$PartySize > 50] <- NA  # Assume parties over 50 are errors

print("Data loaded successfully.")
print("Columns in CSV file:")
print(names(df))

#------------------------------------------------------------
# Insert Lookup Data
#------------------------------------------------------------

insert_lookup_data <- function(con) {
  
  # Insert lookup data
  dbExecute(con, "
    INSERT IGNORE INTO `Meal Type` (`Meal ID`, `Meal Type`) VALUES
    (1, 'Breakfast'), (2, 'Lunch'), (3, 'Dinner'), (4, 'Take-Out');
  ")
  
  dbExecute(con, "
    INSERT IGNORE INTO `Payment Method` (`Payment ID`, `Type`) VALUES
    (1, 'Cash'), (2, 'Credit Card'), (3, 'Mobile Payment');
  ")
  
  print("Lookup data inserted successfully.")
}

#------------------------------------------------------------
# Insert Base Data
#------------------------------------------------------------

# Insert Restaurants
insert_restaurants <- function(con, df) {
  if ("Restaurant" %in% names(df)) {
    restaurants <- unique(df[!is.na(Restaurant), .(Restaurant)])
    for (i in 1:nrow(restaurants)) {
      query <- sprintf("INSERT INTO Restaurant (`Restaurant Name`) VALUES (%s)",
                       ifelse(is.na(restaurants$Restaurant[i]), "NULL", sprintf("'%s'", restaurants$Restaurant[i])))
      dbExecute(con, query)
    }
    print("Restaurants inserted successfully.")
  }
}


# Insert Servers
insert_servers <- function(con, df) {
  if ("ServerEmpID" %in% names(df)) {
    servers <- unique(df[!is.na(ServerEmpID), .(ServerEmpID, ServerName, StartDateHired, EndDateHired, HourlyRate, ServerBirthDate, ServerTIN)])
    for (i in 1:nrow(servers)) {
      
      # Function to clean date values and handle missing/invalid dates
      clean_date <- function(date_value) {
        if (is.na(date_value) || date_value == "" || date_value %in% c("NA", "N/A", "NULL")) {
          return("NULL")
        } else {
          tryCatch({
            return(sprintf("'%s'", format(as.Date(date_value, tryFormats = c("%m/%d/%Y", "%Y-%m-%d")), "%Y-%m-%d")))
          }, error = function(e) {
            return("NULL")  # If date conversion fails, default to NULL
          })
        }
      }
      
      start_date <- clean_date(servers$StartDateHired[i])
      end_date <- clean_date(servers$EndDateHired[i])
      birth_date <- clean_date(servers$ServerBirthDate[i])
      
      # Handle empty or missing ServerTIN values
      server_tin <- if (is.na(servers$ServerTIN[i]) || servers$ServerTIN[i] == "") "NULL" else sprintf("'%s'", servers$ServerTIN[i])
      
      query <- sprintf("INSERT INTO Server (`Server Emp ID`, `Server Name`, `Start Date Hired`, `End Date Hired`, `Hourly Rate`, `Server Birth Date`, `Server TIN`) 
                    VALUES (%s, %s, %s, %s, %s, %s, %s)",
                       ifelse(is.na(servers$ServerEmpID[i]), "NULL", servers$ServerEmpID[i]),
                       ifelse(is.na(servers$ServerName[i]), "NULL", sprintf("'%s'", servers$ServerName[i])),
                       start_date, 
                       end_date, 
                       ifelse(is.na(servers$HourlyRate[i]), "NULL", as.character(servers$HourlyRate[i])),
                       birth_date, 
                       server_tin)  # Ensure empty TIN is NULL
      dbExecute(con, query)
    }
    print("Servers inserted successfully.")
  }
}

insert_customers <- function(con, df) {
  if (any(c("CustomerPhone", "CustomerEmail") %in% names(df))) {
    customers <- unique(df[, .(CustomerPhone, CustomerName, CustomerEmail, LoyaltyMember)])
    
    for (i in 1:nrow(customers)) {
      # Step 1: Check if the customer already exists (matching by phone OR email)
      customer_id_query <- sprintf("
        SELECT `Customer ID` FROM Customer 
        WHERE (COALESCE(`Customer Phone`, '') = COALESCE(%s, '')) 
           OR (COALESCE(`Customer Email`, '') = COALESCE(%s, ''))
        LIMIT 1;",
                                   ifelse(is.na(customers$CustomerPhone[i]), "NULL", sprintf("'%s'", customers$CustomerPhone[i])),
                                   ifelse(is.na(customers$CustomerEmail[i]), "NULL", sprintf("'%s'", customers$CustomerEmail[i]))
      )
      
      result <- dbGetQuery(con, customer_id_query)
      
      if (nrow(result) == 0) {  
        # Step 2: Insert new customer if no match found
        insert_customer_query <- sprintf("
          INSERT INTO Customer (`Customer Phone`, `Customer Name`, `Customer Email`, `Loyalty Member`) 
          VALUES (%s, %s, %s, %s);",
                                         ifelse(is.na(customers$CustomerPhone[i]), "NULL", sprintf("'%s'", customers$CustomerPhone[i])),
                                         ifelse(is.na(customers$CustomerName[i]), "NULL", sprintf("'%s'", customers$CustomerName[i])),
                                         ifelse(is.na(customers$CustomerEmail[i]), "NULL", sprintf("'%s'", customers$CustomerEmail[i])),
                                         ifelse(is.na(customers$LoyaltyMember[i]), "0", as.integer(customers$LoyaltyMember[i])) 
        )
        dbExecute(con, insert_customer_query)
      }
    }
    
    # Step 3: Fetch all customers to create a mapping of phone numbers and emails to IDs
    customer_map <- dbGetQuery(con, "SELECT `Customer ID`, `Customer Phone`, `Customer Email` FROM Customer")
    print("Customers inserted successfully.")
    
    return(customer_map)  # Return mapping for use in `insert_visits`
  }
}

insert_visits <- function(con, df) {
  if (any(c("VisitDate", "VisitTime", "WaitTime", "MealType", "Restaurant", "CustomerPhone", "CustomerEmail", "ServerEmpID", "PartySize") %in% names(df))) {
    visits <- unique(df[, .(VisitDate, VisitTime, WaitTime, MealType, Restaurant, CustomerPhone, CustomerEmail, ServerEmpID, PartySize)])
    
    for (i in 1:nrow(visits)) {
      # Get Customer ID (match by phone or email)
      customer_id_query <- sprintf("
        SELECT `Customer ID` FROM Customer 
        WHERE (COALESCE(`Customer Phone`, '') = COALESCE(%s, '')) 
           OR (COALESCE(`Customer Email`, '') = COALESCE(%s, ''))
        LIMIT 1;",
                                   ifelse(is.na(visits$CustomerPhone[i]), "NULL", sprintf("'%s'", visits$CustomerPhone[i])),
                                   ifelse(is.na(visits$CustomerEmail[i]), "NULL", sprintf("'%s'", visits$CustomerEmail[i]))
      )
      
      result <- dbGetQuery(con, customer_id_query)
      customer_id <- ifelse(nrow(result) == 0, "NULL", result$`Customer ID`[1])  # Use NULL for unknown customers
      
      #Ensure ID 1 is set to NULL
      customer_id_value <- ifelse(customer_id == 1, "NULL", customer_id)
      
      query <- sprintf("
        INSERT INTO Visit (`Visit Date`, `Visit Time`, `Wait Time`, `Meal ID`, `Restaurant ID`, `Customer ID`, `Server ID`, `Party ID`) 
        VALUES (%s, %s, %s, 
        (SELECT `Meal ID` FROM `Meal Type` WHERE `Meal Type` = %s LIMIT 1),
        (SELECT `Restaurant ID` FROM Restaurant WHERE `Restaurant Name` = %s LIMIT 1),
        %s,  -- Uses NULL if customer_id == 1
        (SELECT `Server ID` FROM Server WHERE `Server Emp ID` = %s LIMIT 1),
        NULL);",
                       ifelse(is.na(visits$VisitDate[i]), "NULL", sprintf("'%s'", visits$VisitDate[i])),
                       ifelse(is.na(visits$VisitTime[i]), "NULL", sprintf("'%s'", visits$VisitTime[i])),
                       ifelse(is.na(visits$WaitTime[i]), "NULL", as.character(visits$WaitTime[i])),
                       ifelse(is.na(visits$MealType[i]), "NULL", sprintf("'%s'", visits$MealType[i])),
                       ifelse(is.na(visits$Restaurant[i]), "NULL", sprintf("'%s'", visits$Restaurant[i])),
                       customer_id_value,  # Inserts NULL if customer_id == 1
                       ifelse(is.na(visits$ServerEmpID[i]), "NULL", sprintf("'%s'", visits$ServerEmpID[i]))
      )
      
      dbExecute(con, query)
    }
    print("Visits inserted successfully with correct Customer ID handling.")
  }
}

#Insert Parties
insert_parties <- function(con, df){
  if ("PartySize" %in% names(df)) {
    for (i in 1:nrow(df)) {
      query_insert_party <- sprintf("
    INSERT INTO Party (`Party Size`, Genders) 
    VALUES (%s, %s);",
                                    ifelse(is.na(df$PartySize[i]), "NULL", sprintf("%s", df$PartySize[i])),
                                    ifelse(is.na(df$Genders[i]), "NULL", sprintf("'%s'", df$Genders[i])))
      
      dbExecute(con, query_insert_party)
    }
    print("Parties inserted successfully.")
  }
}

update_visit_with_partyID <- function(con, df) {
  cat("Updating Visit table with correct Party IDs...\n")
  
  for (i in 1:nrow(df)) {
    # Step 1: Insert a new Party and get its Party ID
    query_insert_party <- sprintf("
      INSERT INTO Party (`Party Size`, `Genders`) 
      VALUES (%s, %s);",
                                  ifelse(is.na(df$PartySize[i]), "NULL", sprintf("%s", df$PartySize[i])),
                                  ifelse(is.na(df$Genders[i]), "NULL", sprintf("'%s'", df$Genders[i])))
    
    dbExecute(con, query_insert_party)
    
    # Step 2: Fetch the last inserted Party ID
    query_get_party_id <- "SELECT LAST_INSERT_ID() AS PartyID;"
    new_party_id <- dbGetQuery(con, query_get_party_id)$PartyID[1]
    
    # Step 3: Update the Visit table with this new Party ID
    query_update_visit <- sprintf("
      UPDATE `Visit`
      SET `Party ID` = %s
      WHERE `Visit Date` = %s 
        AND `Visit Time` = %s 
        AND `Restaurant ID` = (SELECT `Restaurant ID` FROM `Restaurant` WHERE `Restaurant Name` = %s LIMIT 1)
      LIMIT 1;",
                                  new_party_id,
                                  ifelse(is.na(df$VisitDate[i]), "NULL", sprintf("'%s'", df$VisitDate[i])),
                                  ifelse(is.na(df$VisitTime[i]), "NULL", sprintf("'%s'", df$VisitTime[i])),
                                  ifelse(is.na(df$Restaurant[i]), "NULL", sprintf("'%s'", df$Restaurant[i])))
    
    dbExecute(con, query_update_visit)
  }
  
  print("Visit table updated with unique Party IDs.")
}



insert_bills <- function(con, df) {
  bills <- unique(df[, .(FoodBill, TipAmount, DiscountApplied, AlcoholBill, PaymentMethod, VisitDate, VisitTime, Restaurant)])
  
  for (i in 1:nrow(bills)) {
    # Ensure that Visit ID exists before inserting a Bill
    visit_id_query <- sprintf("
      SELECT `Visit ID` FROM Visit 
      WHERE `Visit Date` = %s 
      AND `Visit Time` = %s 
      AND `Restaurant ID` = (SELECT `Restaurant ID` FROM Restaurant WHERE `Restaurant Name` = %s LIMIT 1)
      LIMIT 1;",
                              ifelse(is.na(bills$VisitDate[i]), "NULL", sprintf("'%s'", bills$VisitDate[i])),
                              ifelse(is.na(bills$VisitTime[i]), "NULL", sprintf("'%s'", bills$VisitTime[i])),
                              ifelse(is.na(bills$Restaurant[i]), "NULL", sprintf("'%s'", bills$Restaurant[i]))
    )
    
    visit_result <- dbGetQuery(con, visit_id_query)
    
    if (nrow(visit_result) == 0) {
      print(sprintf("⚠️ Warning: No matching Visit ID for bill (VisitDate: %s, VisitTime: %s, Restaurant: %s)",
                    bills$VisitDate[i], bills$VisitTime[i], bills$Restaurant[i]))
      next  # Skip this bill to avoid inserting orphaned records
    }
    
    visit_id <- visit_result$`Visit ID`[1]
    
    # Ensure Payment Method defaults to 'Cash' if missing
    payment_method <- ifelse(is.na(bills$PaymentMethod[i]) || bills$PaymentMethod[i] == "", "Cash", bills$PaymentMethod[i])
    
    query <- sprintf("
      INSERT INTO Bill (`Food Bill`, `Tip Amount`, `Discount Applied`, `Alcohol Bill`, `Payment ID`, `Visit ID`) 
      SELECT %s, %s, %s, %s, 
             (SELECT `Payment ID` FROM `Payment Method` WHERE Type = %s LIMIT 1),
             %s;",
                     ifelse(is.na(bills$FoodBill[i]), "NULL", as.character(bills$FoodBill[i])),
                     ifelse(is.na(bills$TipAmount[i]), "NULL", as.character(bills$TipAmount[i])),
                     ifelse(is.na(bills$DiscountApplied[i]), "NULL", as.character(bills$DiscountApplied[i])),
                     ifelse(is.na(bills$AlcoholBill[i]), "NULL", as.character(bills$AlcoholBill[i])),
                     sprintf("'%s'", payment_method),
                     visit_id
    )
    
    dbExecute(con, query)
  }
  print("✅ Bills inserted successfully with correct Visit ID matching.")
}

update_visit_with_billID <- function(con, db) {
  query_update_bill_id <- "
    UPDATE Visit v
    JOIN Bill b ON v.`Visit ID` = b.`Visit ID`
    SET v.`Bill ID` = b.`Bill ID`
    WHERE v.`Bill ID` IS NULL;"
  
  dbExecute(con, query_update_bill_id)
  print("Visit table updated with correct Bill IDs.")
}

#------------------------------------------------------------
# Main Execution Function
#------------------------------------------------------------

main <- function() {
  # Establish database connection
  con <- connect_db()
  
  # Insert lookup data first
  insert_lookup_data(con)
  
  # Insert base data
  insert_restaurants(con, df)
  insert_servers(con, df)
  insert_customers(con, df)
  insert_visits(con, df)
  insert_parties(con, df)
  
  # Update foreign key references
  update_visit_with_partyID(con, df)
  
  # Insert bills and update Visit table with Bill ID
  insert_bills(con, df)
  update_visit_with_billID(con, df)
  
  # Close database connection
  dbDisconnect(con)
  
  print("Database population complete.")
}

# Run the main function
main()